// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/CategoryService/category_service.proto

package CategoryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Category_InsertCategory_FullMethodName       = "/categorypb.Category/InsertCategory"
	Category_LinkBookWithCategory_FullMethodName = "/categorypb.Category/LinkBookWithCategory"
)

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryClient interface {
	InsertCategory(ctx context.Context, in *InsertCategoryRequest, opts ...grpc.CallOption) (*InsertCategoryResponse, error)
	LinkBookWithCategory(ctx context.Context, in *LinkBookWithCategoryRequest, opts ...grpc.CallOption) (*LinkBookWithCategoryResponse, error)
}

type categoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryClient(cc grpc.ClientConnInterface) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) InsertCategory(ctx context.Context, in *InsertCategoryRequest, opts ...grpc.CallOption) (*InsertCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertCategoryResponse)
	err := c.cc.Invoke(ctx, Category_InsertCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) LinkBookWithCategory(ctx context.Context, in *LinkBookWithCategoryRequest, opts ...grpc.CallOption) (*LinkBookWithCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkBookWithCategoryResponse)
	err := c.cc.Invoke(ctx, Category_LinkBookWithCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
// All implementations must embed UnimplementedCategoryServer
// for forward compatibility.
type CategoryServer interface {
	InsertCategory(context.Context, *InsertCategoryRequest) (*InsertCategoryResponse, error)
	LinkBookWithCategory(context.Context, *LinkBookWithCategoryRequest) (*LinkBookWithCategoryResponse, error)
	mustEmbedUnimplementedCategoryServer()
}

// UnimplementedCategoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServer struct{}

func (UnimplementedCategoryServer) InsertCategory(context.Context, *InsertCategoryRequest) (*InsertCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCategory not implemented")
}
func (UnimplementedCategoryServer) LinkBookWithCategory(context.Context, *LinkBookWithCategoryRequest) (*LinkBookWithCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkBookWithCategory not implemented")
}
func (UnimplementedCategoryServer) mustEmbedUnimplementedCategoryServer() {}
func (UnimplementedCategoryServer) testEmbeddedByValue()                  {}

// UnsafeCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServer will
// result in compilation errors.
type UnsafeCategoryServer interface {
	mustEmbedUnimplementedCategoryServer()
}

func RegisterCategoryServer(s grpc.ServiceRegistrar, srv CategoryServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Category_ServiceDesc, srv)
}

func _Category_InsertCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).InsertCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_InsertCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).InsertCategory(ctx, req.(*InsertCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_LinkBookWithCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkBookWithCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).LinkBookWithCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_LinkBookWithCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).LinkBookWithCategory(ctx, req.(*LinkBookWithCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Category_ServiceDesc is the grpc.ServiceDesc for Category service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Category_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "categorypb.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCategory",
			Handler:    _Category_InsertCategory_Handler,
		},
		{
			MethodName: "LinkBookWithCategory",
			Handler:    _Category_LinkBookWithCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/CategoryService/category_service.proto",
}
